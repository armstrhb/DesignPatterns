<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns, explained simply</title>
    <link>http://localhost:1313/DesignPatterns/</link>
    <description>Recent content on Design Patterns, explained simply</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Mar 2015 14:33:00 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/DesignPatterns/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Builder</title>
      <link>http://localhost:1313/DesignPatterns/patterns/creational/builder/</link>
      <pubDate>Sun, 29 Mar 2015 14:33:00 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/creational/builder/</guid>
      <description>

&lt;p&gt;Sometimes object creation isn&amp;rsquo;t simple. Why not let something do it for you?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:8fd4bc5e57a8b030c7141267f15a6e67&#34;&gt;Explained as to a 5 year old&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re great at drawing pictures. A friend lets you know that they would like
to have a picture of a dinosaur.  So, you sit down at a table with some paper
and crayons, and draw a picture of a dinosaur.  Very nice!&lt;/p&gt;

&lt;p&gt;A few moments later, another friend asks for a picture of of a firetruck.
Again, you sit down and whip up a picture of a firetruck.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re acting out the &lt;strong&gt;builder&lt;/strong&gt; pattern.  Think of the pictures as objects.
You, as the builder, receive some sort of input (like a friend saying they want
  some type of picture).  You take care of the creation of the object (gathering
the required drawing materials, paper, drawing the picture, etc.) and return it
to the requester.&lt;/p&gt;

&lt;h3 id=&#34;code-sample:8fd4bc5e57a8b030c7141267f15a6e67&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;explanation:8fd4bc5e57a8b030c7141267f15a6e67&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pattern Index</title>
      <link>http://localhost:1313/DesignPatterns/patterns/</link>
      <pubDate>Fri, 27 Mar 2015 23:34:07 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s the progress I&amp;rsquo;ve made so far.  The design patterns are split out
by their classic categories.  Check back often for updates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>State</title>
      <link>http://localhost:1313/DesignPatterns/patterns/behavioral/state/</link>
      <pubDate>Sun, 22 Mar 2015 16:00:55 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/behavioral/state/</guid>
      <description>

&lt;p&gt;How can you make the same behavior do different things to an object?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:0681be2a286ee8aab9e9e03ff9e5eb18&#34;&gt;Explained as to a 5 year old&lt;/h3&gt;

&lt;p&gt;One morning, you wake up in your bed. You look at the window, and the sun is
up, but you are still tired.  So, you decide to roll back
over, snuggle up with your blanket, and go back to sleep.  A while later, you
wake up again, and this time you feel nice and rested. Now that you&amp;rsquo;re no longer
sleepy, you decide to get up out of bed to begin your day.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; pattern can be seen here.  Think of your restfulness as defined
by two states: &lt;em&gt;rested&lt;/em&gt; and &lt;em&gt;not rested&lt;/em&gt;.  When you were woken the first time,
your internal state was &lt;em&gt;not rested&lt;/em&gt;, so when you woke the first time, the
appropriate behavior was to go back to sleep.  While you were sleeping, your
internal state changed to &lt;em&gt;rested&lt;/em&gt;, and when you awoke next, you got up out of
bed.&lt;/p&gt;

&lt;p&gt;Your behavior changed based on your internal state. An outside event, like
maybe a bird singing by your window, or your brother playing in the next room,
woke you.  And whether you got out of bed or not depended on how rested you
were.&lt;/p&gt;

&lt;h3 id=&#34;code-sample:0681be2a286ee8aab9e9e03ff9e5eb18&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;explanation:0681be2a286ee8aab9e9e03ff9e5eb18&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thread Pool</title>
      <link>http://localhost:1313/DesignPatterns/patterns/concurrency/threadpool/</link>
      <pubDate>Thu, 19 Mar 2015 23:24:49 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/concurrency/threadpool/</guid>
      <description>

&lt;p&gt;Sometimes I really don&amp;rsquo;t want to do something twice, especially when it&amp;rsquo;s
expensive to set up. What if I held onto it, after I used it?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:6800be17c4c05166f264388caeb21f7b&#34;&gt;Explained as to a 5 year old&lt;/h3&gt;

&lt;p&gt;Your teacher takes out ten pairs of scissors from the supply closet at the
beginning of arts and crafts time. When any of the children need to use
scissors, they ask the teacher, and the teacher will give them a pair, if
one&amp;rsquo;s available. If all ten pairs of scissors are being used, the teacher
will go to the supply closet and get more. When a child is done with the
scissors, they are given back to the teacher to hold on to for the next child
who needs it.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;Thread Pool&lt;/strong&gt; pattern. Expensive object creation (going into
the closet to get scissors) is managed by reusing created objects (holding
on to a few pairs at once). A manager object creates a repository, or
pool, for a set number of objects to stay, available for use when something
requests it. Once the requester has used the object, it is &amp;lsquo;released&amp;rsquo; back to
the pool manager. The pool can grow or shrink, based on the demand of the
pool&amp;rsquo;s objects.&lt;/p&gt;

&lt;h3 id=&#34;code-sample:6800be17c4c05166f264388caeb21f7b&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;explanation:6800be17c4c05166f264388caeb21f7b&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Strategy</title>
      <link>http://localhost:1313/DesignPatterns/patterns/behavioral/strategy/</link>
      <pubDate>Thu, 19 Mar 2015 23:24:38 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/behavioral/strategy/</guid>
      <description>

&lt;p&gt;One problem.  Many different ways to solve it. How do we account for them all?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:010736ab8fdfc1cfa693a6e5a7960263&#34;&gt;Explained as to a 5 year old&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say you have a new race car track playset. The tracks come in little
pieces that you, or a best friend, or mommy or daddy, can put together in
many different ways. Let&amp;rsquo;s say this is a really cool play set, and includes
a big red button that rockets the race car onto the track. The whole thing
works great, as long as you connect the track to the big red button.&lt;/p&gt;

&lt;p&gt;You like big red buttons, so daddy makes three or four different race tracks.
You can then choose which one you want to race on next, and daddy plugs it in
to the big red button. All you have to do is press the button, and watch the
race cars zoom along the race track.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Strategy Pattern&lt;/strong&gt; can be seen here. An algorithm is declared (race cars
can be shot down a race track by pressing a big red button). The type of
track, the color of the cars, etc, can vary from track to track. Each works
though, as long as it connects to the big red button that fires them off.&lt;/p&gt;

&lt;h3 id=&#34;code-sample:010736ab8fdfc1cfa693a6e5a7960263&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;explanation:010736ab8fdfc1cfa693a6e5a7960263&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facade</title>
      <link>http://localhost:1313/DesignPatterns/patterns/structural/facade/</link>
      <pubDate>Thu, 19 Mar 2015 23:22:18 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/structural/facade/</guid>
      <description>

&lt;p&gt;Not everything&amp;rsquo;s simple. But what if I let something else handle the complexity
for me?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:184257c8e3a9137497a20d49b4964047&#34;&gt;Explained as to a 5 year old.&lt;/h3&gt;

&lt;p&gt;At bath time, mommy or daddy draws the batch for you. And when they say it&amp;rsquo;s
ready, you jump in, and have a great time trying to get as much bath water out
of the tub as possible.&lt;/p&gt;

&lt;p&gt;Have you ever tried to draw a bath by yourself, though? They&amp;rsquo;re more to it
than just flipping the water on. You have to keep the drain open, testing
the water until the temperature is just right, adjusting the knob when needed.
Once the temperature is where you&amp;rsquo;d be comfortable, it&amp;rsquo;s time to plug the
drain, pour in the bubble bath, and watch the water level until it&amp;rsquo;s high
enough (but not too high). Then you turn the water off, and you&amp;rsquo;re done!&lt;/p&gt;

&lt;p&gt;But you don&amp;rsquo;t have to worry about all that. Mommy or Daddy does this for you.
In this, your parent is acting as a &lt;strong&gt;facade&lt;/strong&gt;, and performing a complex series
of steps or operations for you. All you have to do, is tell Mommy or Daddy
that you&amp;rsquo;re ready for a bath. They do all the work of getting the bath ready.&lt;/p&gt;

&lt;h3 id=&#34;code-sample:184257c8e3a9137497a20d49b4964047&#34;&gt;Code Sample&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public interface BathTub {
  public void turnOn();
  public void turnOff();
  public void plugDrain();
  public void unplugDrain();
  public void adjustTemperature(int increment);
  public void addSubstanceToBathWater(Substance solution);
  public int getWaterLevel();
  public int getWaterTemperature();
}

public class Parent implements Person {
  public getPreferredBatchTemperature() {
    return 100;
  }

  public getPreferredBathWaterLevel() {
    return 18;
  }

  public void drawBath(BathTub bath) {
    bath.unplugDrain();
    bath.turnOn();
    bath.adjustTemperature(getPreferredBatchTemperature());

    while (bath.getWaterTemperature() &lt; getPreferredBatchTemperature()) {
      wait(30); // just wait 30 seconds
    }

    bath.plugDrain();

    while (bath.getWaterLevel() &lt; getPreferredBathWaterLevel()) {
      wait(5); // just wait 5 seconds
    }

    turnOff();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;explanation:184257c8e3a9137497a20d49b4964047&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Observer</title>
      <link>http://localhost:1313/DesignPatterns/patterns/behavioral/observer/</link>
      <pubDate>Thu, 19 Mar 2015 22:47:14 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/behavioral/observer/</guid>
      <description>

&lt;p&gt;Why poll when you can be notified?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:176314bb5b9f372fe3d37195de41f249&#34;&gt;Explained as to a 5 year old.&lt;/h3&gt;

&lt;p&gt;It is close to dinner time, and you&amp;rsquo;re hungry. Mommy or Daddy is cooking
dinner. You want to make sure that you know dinner is ready as soon as it&amp;rsquo;s
ready. Would you walk into the kitchen every 5 minutes and ask Mommy/Daddy if
dinner is ready? Or, would you ask Mommy/Daddy to let you know when dinner&amp;rsquo;s
ready? That way, you can do other things, like playing or watching a cartoon.
When dinner is ready, you&amp;rsquo;ll be told so, and until then, you don&amp;rsquo;t have to
think about it, except when you&amp;rsquo;re tummy reminds you.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Observer&lt;/strong&gt; pattern is shown in this, because you asked your parent to tell
you when something that you care about (dinner) has changed its state (it&amp;rsquo;s
ready to be eaten).&lt;/p&gt;

&lt;h3 id=&#34;code-sample:176314bb5b9f372fe3d37195de41f249&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;explanation:176314bb5b9f372fe3d37195de41f249&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterator</title>
      <link>http://localhost:1313/DesignPatterns/patterns/behavioral/iterator/</link>
      <pubDate>Thu, 19 Mar 2015 22:31:21 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/patterns/behavioral/iterator/</guid>
      <description>

&lt;p&gt;What&amp;rsquo;s the easiest (or laziest) way to traverse through a list?&lt;/p&gt;

&lt;h3 id=&#34;explained-as-to-a-5-year-old:f35e99ba19d9adb695744835c3395c7f&#34;&gt;Explained as to a 5 year old&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;code-sample:f35e99ba19d9adb695744835c3395c7f&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;explanation:f35e99ba19d9adb695744835c3395c7f&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/DesignPatterns/about/</link>
      <pubDate>Thu, 19 Mar 2015 21:15:07 -0400</pubDate>
      
      <guid>http://localhost:1313/DesignPatterns/about/</guid>
      <description>

&lt;h3 id=&#34;design-patterns-an-exercise-in-futility-i-mean-gaining-knowledge:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Design Patterns, an exercise in futility.. I mean gaining knowledge&lt;/h3&gt;

&lt;p&gt;Design Patterns, explained simply, was started by
&lt;a href=&#34;https://github.com/armstrhb&#34;&gt;Henry Armstrong&lt;/a&gt; (that&amp;rsquo;s me)
in March of 2015.&lt;/p&gt;

&lt;p&gt;As an application support analyst at a major health
insurance company in the US, I began to ache for a better understanding of
better ways to accomplish common problems and tasks I encountered when creating
internal utilities for my teams.  I was aware of software design patterns,
and the various resources online for them.  I was also aware that I was slowly
becoming dependent on google for an ever increasing amount of code-related
things.&lt;/p&gt;

&lt;p&gt;Hoping to stop this, I began to look more closely at these common design
patterns.  If I could understand these to a point that I could explain them
to my five year old son (or even better my three year old youngest!), then I&amp;rsquo;d
have an understanding that would stay with me, and make my resources less
internet-based.&lt;/p&gt;

&lt;h3 id=&#34;sources-and-inspiration:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Sources and Inspiration&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve used several sources throughout my learnings of the popular design
patterns that exist out on the internet.  Here are the ones I think most
fondly of.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcemaking.com/design_patterns/adapter&#34;&gt;SourceMaking&lt;/a&gt; - a great
website that plainly illustrates several design patterns, anti-patterns, and
even some refactoring tips.  Great site.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>